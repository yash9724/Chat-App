package chat.net.gui;

import chat.net.dao.ChatClientsDAO;
import chat.net.dao.ChatLogsDAO;
import chat.net.pojo.ChatClients;
import chat.net.pojo.ChatLogs;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Scanner;
import javax.swing.JOptionPane;

public class ServerFrame extends javax.swing.JFrame {

    ServerSocket serverSocks;
    ArrayList<String> userNames = new ArrayList<>();
    ArrayList<PrintWriter> printWriters = new ArrayList<>();
    PrintWriter writeToFile;
    FileWriter fw;
    SimpleDateFormat sdfObject;

    public ServerFrame() {
        initComponents();
        setLocationRelativeTo(null);
        btnStopServer.setEnabled(false);

        try {
            fw = new FileWriter("..\\CHAT-MODIFIED\\src\\chat\\modified\\log\\logfile", true);
            writeToFile = new PrintWriter(fw, true);
            sdfObject = new SimpleDateFormat("HH:mm:ss , dd-mmm-yyyy");
        } catch (IOException e) {
            System.out.println("Error in creating log.txt file");
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnStartServer = new javax.swing.JButton();
        btnStopServer = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtChat = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("CHAT MODIFIED");

        jLabel2.setText("SERVER FRAME");

        btnStartServer.setText("START SERVER");
        btnStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartServerActionPerformed(evt);
            }
        });

        btnStopServer.setText("STOP SERVER");

        txtChat.setColumns(20);
        txtChat.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        txtChat.setRows(5);
        jScrollPane1.setViewportView(txtChat);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnStartServer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnStopServer))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(293, 293, 293)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))))
                .addContainerGap(30, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStartServer)
                    .addComponent(btnStopServer))
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartServerActionPerformed
        try {
            serverSocks = new ServerSocket(9724);
            txtChat.append("Server Started.\nWaiting for clients...\n");
            WaitForConnectionThread waitForConnectionThread = new WaitForConnectionThread();
            waitForConnectionThread.start();
            btnStartServer.setEnabled(false);
            btnStopServer.setEnabled(true);

        } catch (IOException e) {
            System.out.println("Problem occured in starting server(at btnServerActionPerformed)");
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnStartServerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnStartServer;
    private javax.swing.JButton btnStopServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtChat;
    // End of variables declaration//GEN-END:variables

    class WaitForConnectionThread extends Thread {

        Socket socks;

        @Override
        public void run() {
            try {
                while (true) {
                    socks = serverSocks.accept();
                    ChatHandler chatHandler = new ChatHandler(socks);
                    chatHandler.start();
                }
            } catch (SocketException e) {
                System.out.println("SocketException in waitForConnectionThread while accepting connection");
                e.printStackTrace();
            } catch (IOException e) {
                System.out.println("SocketException in waitForConnectionThread while accepting connection");
                e.printStackTrace();
            }
        }
    }

    class ChatHandler extends Thread {

        Socket socks;
        ChatClients client;
        PrintWriter pw;
        Scanner scanner;
        ObjectInputStream ois;

        ChatHandler(Socket socks) {
            this.socks = socks;
            try {
                System.out.println("here inside constructor of thread " + Thread.currentThread().getName());
                pw = new PrintWriter(socks.getOutputStream(), true);
                scanner = new Scanner(socks.getInputStream());
                ois = new ObjectInputStream(socks.getInputStream());
            } catch (IOException e) {
                System.out.println("IOException in ChatHandler constructor\nClient Address: " + socks.getInetAddress());
            }

        }

        @Override
        public void run() {
            acceptUsername();

            try {
                txtChat.append(client.getUsername() + " joined the chat room\n");
                printWriters.add(pw);
                for (PrintWriter writer : printWriters) {
                    if (writer != pw) {
                        writer.println(client.getUsername() + " joined the chat room ");
                    }
                }
                String clientMessage = scanner.nextLine();
                while (!clientMessage.equalsIgnoreCase("quit")) {
                    synchronized (writeToFile) {
                        Date current = new Date();
                        String formattedDate = sdfObject.format(current);
                        writeToFile.println(client.getUsername() + ": " + clientMessage + "  " + formattedDate);
                        try {
                            ChatLogs chatLog = new ChatLogs();
                            chatLog.setUsername(client.getUsername());
                            chatLog.setMessage(clientMessage);
                            chatLog.setTimestamp(current.toString());
                            boolean res = ChatLogsDAO.addChatLog(chatLog);
                            if (res) {
                                System.out.println("Saved to DB");
                            }

                        } catch (SQLException e) {
                            JOptionPane.showMessageDialog(null, "Exception Occurred in ChatLogDAO", "Failure!", JOptionPane.ERROR_MESSAGE);
                            e.printStackTrace();
                        }
                    }

                    for (PrintWriter writer : printWriters) {
                        if (writer != pw) {
                            writer.println(client.getUsername() + ":" + clientMessage);
                        }
                    }
                    clientMessage = scanner.nextLine();
                }

                txtChat.append(client.getUsername() + " left the chat room\n");
                for (PrintWriter writer : printWriters) {
                    if (writer != pw) {
                        writer.println(client.getUsername() + " left the chat room");
                    }
                }
                socks.close();
                printWriters.remove(pw);
                userNames.remove(client.getUsername());
                pw.close();
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(null, "Exception in server:" + ex);
                ex.printStackTrace();
                return;
            }
        }

        private void acceptUsername() {
            pw.println("LOGIN/SIGNUP DIALOG");
            try {
                while (true) {
                    client = (ChatClients) ois.readObject();

                    if (userNames.contains(client.getUsername())) {
                        pw.println("NAME ALREADY EXITS");
                    } else {
                        userNames.add(client.getUsername());
                        if (ChatClientsDAO.findClient(client.getUsername())) {
                            pw.println("NAME ACCEPTED");
                            break;
                        } else {
                            boolean res = ChatClientsDAO.addClient(client);
                            if (res) {
                                pw.println("CLIENT REGISTERED SUCCESSFULLY");
                                break;
                            } else {
                                pw.println("PROBLEM OCCURED WHILE ADDING CLIENT");
                            }
                        }
                    }
                }
            } catch (IOException | ClassNotFoundException | SQLException e) {
                e.printStackTrace();
                pw.println("PROBLEM OCCURED WHILE ADDING CLIENT");
            }

        }
    }
}
